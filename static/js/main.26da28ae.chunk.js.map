{"version":3,"sources":["Table.js","BoxInfo.js","Linegraph.js","LineGraphByCountry.js","Donut.js","App.js","reportWebVitals.js","index.js"],"names":["Table","countries","className","map","country","cases","BoxInfo","title","Cases","Total","colors","Card","variant","style","backgroundColor","height","CardContent","Typography","color","Linegraph","Yaxis","data","labels","dates","datasets","label","fill","borderColor","LineGraphByCountry","CasesOnYaxis","Deaths","Date","countryname","yAxisID","options","scales","yAxes","type","display","position","id","gridLines","drawOnArea","Donut","r","c","d","countryName","borderWidth","App","useState","setCountries","selectCountry","setSelectcountry","CountryInfo","setCountryInfo","tableData","setTabledata","coronaCases","setCoronaCases","Dates","setDates","date","setdate","CountryCases","setCountryCases","DeathRate","setDeathRate","Re","setRe","Ca","setCa","De","setDe","Countryname","setCountryname","useEffect","fetch","then","response","json","WorldCases","WorldCasesArr","WorldCasesDates","i","push","res","countriesDefault","countriesDefaultDates","timeline","death","deaths","recovered","getData","a","name","value","countryInfo","iso2","FormControl","Select","onChange","e","CountryCode","target","countriesHistory","countriesHistoryDates","console","log","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26da28ae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Table = ({countries}) => {\r\n    return (\r\n        <>\r\n            <div className=\"tabledata\">\r\n               {countries.map(({country,cases})=>(\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td><strong>{cases}</strong></td>\r\n                    </tr>\r\n                ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table","import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst BoxInfo = ({ title, Cases, Total, colors }) => {\r\n  return (\r\n    <>\r\n      <Card className=\"Boxinfo\" variant=\"outlined\">\r\n        <div style={{ backgroundColor: `${colors}`, height: \"10px\" }}></div>\r\n        <CardContent className=\"Box\">\r\n          <Typography className=\"Box__title\" variant=\"h5\">\r\n            {title}\r\n          </Typography>\r\n          <Typography>Today {title}</Typography>\r\n          <h2 className=\"Box__cases\" style={{ color: `${colors}` }}>\r\n            +{Cases}\r\n          </h2>\r\n          <Typography className=\"Box__total\">{Total} total</Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BoxInfo;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst Linegraph = ({ Yaxis, title, dates }) => {\r\n  const data = {\r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: `Last ${title} Days`,\r\n        data: Yaxis,\r\n        fill: false,\r\n        backgroundColor: \"rgb(255, 99, 132)\",\r\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return(\r\n  <><h2>Worldwide Cases History</h2><Line data={data} /></>);\r\n};\r\n\r\nexport default Linegraph;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst LineGraphByCountry = ({ CasesOnYaxis, Deaths, Date, countryname }) => {\r\n  const data = {\r\n    labels: Date,\r\n    datasets: [\r\n      {\r\n        label: `Cases Of Last 10 Days`,\r\n        data: CasesOnYaxis,\r\n        fill: false,\r\n        backgroundColor: \"rgb(255, 99, 132)\",\r\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n      },\r\n      {\r\n        label: \"Death Rate Of Last 10 Days\",\r\n        data: Deaths,\r\n        fill: false,\r\n        backgroundColor: \"rgb(54, 162, 235)\",\r\n        borderColor: \"rgba(54, 162, 235, 0.2)\",\r\n        yAxisID: \"y-axis-2\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          type: \"linear\",\r\n          display: true,\r\n          position: \"left\",\r\n          id: \"y-axis-1\",\r\n        },\r\n        {\r\n          type: \"linear\",\r\n          display: true,\r\n          position: \"right\",\r\n          id: \"y-axis-2\",\r\n          gridLines: {\r\n            drawOnArea: false,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"uperGraph\">\r\n      <h2>Cases History Of {countryname}</h2>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraphByCountry;\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nconst Donut = ({ r, c, d, countryName }) => {\r\n  const data = {\r\n    labels: [\"Recovered\", \"Cases\", \"Death\"],\r\n    datasets: [\r\n      {\r\n        label: \"# of Votes\",\r\n        data: [r, c, d],\r\n        backgroundColor: [\r\n          \"rgba(255, 99, 132, 0.2)\",\r\n          \"rgba(54, 162, 235, 0.2)\",\r\n          \"rgba(255, 206, 86, 0.2)\",\r\n          \"rgba(75, 192, 192, 0.2)\",\r\n          \"rgba(153, 102, 255, 0.2)\",\r\n          \"rgba(255, 159, 64, 0.2)\",\r\n        ],\r\n        borderColor: [\r\n          \"rgba(255, 99, 132, 1)\",\r\n          \"rgba(54, 162, 235, 1)\",\r\n          \"rgba(255, 206, 86, 1)\",\r\n          \"rgba(75, 192, 192, 1)\",\r\n          \"rgba(153, 102, 255, 1)\",\r\n          \"rgba(255, 159, 64, 1)\",\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <>\r\n    <div className=\"Doughnut\">\r\n      <Doughnut data={data} />\r\n      <h2 className=\"DoughnutHeading\">{countryName}</h2>\r\n      </div>  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Donut;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Card, CardContent, setRef } from \"@material-ui/core\";\nimport Table from \"./Table\";\nimport BoxInfo from \"./BoxInfo\";\nimport { FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Linegraph from \"./Linegraph\";\nimport LineGraphByCountry from \"./LineGraphByCountry\";\nimport Donut from \"./Donut\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [selectCountry, setSelectcountry] = useState(\"worldwide\");\n  const [CountryInfo, setCountryInfo] = useState({});\n  const [tableData, setTabledata] = useState([]);\n  const [coronaCases, setCoronaCases] = useState([]);\n  // const [selectedDays, setSelectedDays] = useState(15);\n  const [Dates, setDates] = useState([]);\n  const [date, setdate] = useState([]);\n  const [CountryCases, setCountryCases] = useState([]);\n  const [DeathRate, setDeathRate] = useState([]);\n  const [Re, setRe] = useState(0);\n  const [Ca, setCa] = useState(0);\n  const [De, setDe] = useState(0);\n  const [Countryname, setCountryname] = useState(\"Pakistan\");\n\n  useEffect(() => {\n    fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=15`)\n      .then((response) => response.json())\n      .then((data) => {\n        let WorldCases = data;\n        let WorldCasesArr = [];\n        let WorldCasesDates = [];\n        for (let i in WorldCases.cases) {\n          WorldCasesArr.push(WorldCases.cases[i]);\n          WorldCasesDates.push(i);\n        }\n        setCoronaCases(WorldCasesArr);\n        setDates(WorldCasesDates);\n      });\n    //=======================Default fetch graph Data by country===============\n    fetch(`https://disease.sh/v3/covid-19/historical/Pakistan?lastdays=10`)\n      .then((res) => res.json())\n      .then((data) => {\n        let countriesDefault = [];\n        let countriesDefaultDates = [];\n        for (let i in data.timeline.cases) {\n          countriesDefault.push(data.timeline.cases[i]);\n          countriesDefaultDates.push(i);\n        }\n        setCountryCases(countriesDefault);\n        setdate(countriesDefaultDates);\n        let death = [];\n        for (let i in data.timeline.deaths) {\n          death.push(data.timeline.deaths[i]);\n        }\n        setDeathRate(death);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n        setRe(data.recovered);\n        setCa(data.cases);\n        setDe(data.deaths);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            Cases: country.cases,\n            id: country,\n          }));\n          setTabledata(data);\n          setCountries(countries);\n        });\n    };\n    getData();\n  }, []);\n\n  const getchangeData = (e) => {\n    const CountryCode = e.target.value;\n    setSelectcountry(CountryCode);\n    fetch(\n      `https://disease.sh/v3/covid-19/historical/${CountryCode}?lastdays=10`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let countriesHistory = [];\n        let countriesHistoryDates = [];\n        for (let i in data.timeline.cases) {\n          countriesHistory.push(data.timeline.cases[i]);\n          countriesHistoryDates.push(i);\n        }\n        setCountryCases(countriesHistory);\n        setdate(countriesHistoryDates);\n        let death = [];\n        for (let i in data.timeline.deaths) {\n          death.push(data.timeline.deaths[i]);\n        }\n        setDeathRate(death);\n      });\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => res.json())\n      .then((data) => {\n        data.map((c) => {\n          if (c.country == CountryCode) {\n            setCountryname(c.country);\n            setCountryInfo(c);\n            setRe(c.recovered);\n            setCa(c.cases);\n            setDe(c.deaths);\n          } else console.log(\"Not Match\");\n        });\n      });\n  };\n\n  \n// Additional functionality\n  // const getchangeDays = (e) => {\n  //   setSelectedDays(e.target.value);\n  //   fetch(\n  //     `https://disease.sh/v3/covid-19/historical/all?lastdays=${e.target.value}`\n  //   )\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       let c = data;\n  //       let text = [];\n  //       let d = [];\n  //       for (let i in c.cases) {\n  //         text.push(c.cases[i]);\n  //         console.log(c.cases[i]);\n  //         d.push(i);\n  //       }\n  //       setCoronaCases(text);\n  //       setDates(d);\n  //     });\n  // };\n\n  return (\n    <div className=\"App\">\n      {/* header */}\n      <div className=\"App__header\">\n        <h1>C❄️vid-19-Tracker </h1>\n        <FormControl className=\"App__dropdown\">\n          <Select\n            variant=\"outlined\"\n            value={selectCountry}\n            onChange={getchangeData}\n          >\n            <MenuItem value=\"worldwide\">world wide</MenuItem>\n            {countries.map((country) => {\n              return <MenuItem value={country.name}>{country.name}</MenuItem>;\n            })}\n          </Select>\n        </FormControl>\n      </div>\n      {/* infoBoxes */}\n      <hr className=\"line\" />\n      <div className=\"App__boxes\">\n        <BoxInfo\n          colors=\"orange\"\n          title=\"Coronavirus Cases\"\n          Total={CountryInfo.cases}\n          Cases={CountryInfo.todayCases}\n        />\n        <BoxInfo\n          colors=\"green\"\n          title=\"Recovered Cases\"\n          Total={CountryInfo.recovered}\n          Cases={CountryInfo.todayRecovered}\n        />\n        <BoxInfo\n          colors=\"red\"\n          title=\"Death Rate\"\n          Total={CountryInfo.deaths}\n          Cases={CountryInfo.todayDeaths}\n        />\n      </div>\n      <div className=\"App_History\">\n{/* =====================Left Side================= */}\n        <div className=\"Graphs\">\n          <div className=\"Leftup\">\n            <LineGraphByCountry\n              CasesOnYaxis={CountryCases}\n              Deaths={DeathRate}\n              Date={date}\n              countryname={Countryname}\n            />\n          </div>\n          <div className=\"Leftdown\">\n            <Linegraph Yaxis={coronaCases} title={15} dates={Dates} />\n          </div>\n        </div>\n\n        {/* Addition Functionality */}\n        {/* \n          <div className=\"graphHeading\">\n            <FormControl className=\"days__dropdown\">\n              <Select\n                variant=\"outlined\"\n                value={selectedDays}\n                onChange={getchangeDays}\n              >\n                {selectedDays}\n                <MenuItem value=\"7\">7 Days</MenuItem>\n                <MenuItem value=\"15\">15 Days</MenuItem>\n                <MenuItem value=\"30\">30 Days</MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n             */}\n\n{/* =====================Right Side================= */}\n        <Card className=\"Right\" variant=\"outlined\">\n          <CardContent className=\"Box\">\n            {/* table */}\n            <h3>List of cases by Country</h3>\n            <Table countries={tableData} />\n            {/* Doughnut */}\n            <Donut r={Re} c={Ca} d={De} countryName={selectCountry} />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}